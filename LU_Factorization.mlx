% Exmaple. Consider Ax = b. 
A = [6,1,7,7,6,1,8;7,5,5,2,7,8,7;9,5,3,4,4,4,3;9,8,1,6,-1,8,2;1,4,5,3,3,3,7;1,3,2,7,4,7,9;6,6,-2,3,2,3,3];
b = [6;4;8;7;1;8;9];

% Apply the LU_factorization function to decompose 
% A = LU.
[L,U] = LU_factorization(A)
y = forward_substitution(L,b)
x = backward_substitution(U,y)
true_solu = A\b

% Compute the error between the true solution and the solution obtained
% using LU decomposition.
Err = abs(true_solu - x)


function [L,U] = LU_factorization(A)
N = size(A,1);
U = A;
L = eye(N);

for j =1:N-1
         % If the diagonal entry is 0, find the 1st nonzero entry on the same column,
         % swap the row A(j,:) and the corresponding nonzero column entry
         % row.
         if (A(j,j) == 0)
           p = find(A(:,j)~=0);
           tmp = A(j,:);
           ptmp = p(p~=i)
           A(j,:) = A(ptmp(1),:);
           A(ptmp(1),:) = tmp;
           index = ptmp(1);  
         else
             index = j+1;
         end 
        Tmp = eye(N);
        L(index:end,j) = A(index:end,j)/A(j,j);
        Tmp(index:end,j) = -A(index:end,j)/A(j,j);
        % Tmp performs Gaussian elimination steps to the matrix A
        % in the matrix multiplicaiton fashion.
        A = Tmp*A;
        U = A;
         


end

end

%% Backward substituion to solve Ux = f.
 function [x] = backward_substitution(U,f)
 N = size(U,1);
 x = zeros(N,1);
 x(N) = f(N)/U(N,N);
 for i = 2:N
     j = N-(i-1);
     coeff = 0;
     for k = j+1:N
         coeff = coeff + U(j,k)*x(k);
     end
     x(j) = (f(j) - coeff)/ U(j,j);
    
 end
 
 end

 %% Forward substituion to solve Ly = b.
 function [x] = forward_substitution(L,f)
 N = size(L,1);
 x = zeros(N,1);
 x(1) = f(1)/L(1,1);
 for i = 2:N
     coeff = 0;
     for k = 1:i-1
         coeff = coeff + L(i,k)*x(k);
     end
     x(i) = (f(i) - coeff)/ L(i,i);
    
 end
 
 end